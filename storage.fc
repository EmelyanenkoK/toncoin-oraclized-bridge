;; TLB Storage scheme
;; complaint - cell with OpaqueStructure;
;; secp_pubkey#_ pubk:uint256 = SecpPubkey;
;; ed_pubkey#_ pubk:uint256 = EdPubkey;
;; NOTE oracle_address = address hash part, wc should be equal -1
;; oracle#_ ed25519_key:EdPubkey secp256k1:SecpPubkey = Oracle;
;; oracle_address#_ address_hash:uint256 = OracleAddress;
;; oracle_set_data#_ locked:bool 
;;                   unrewarded_stake:Grams
;;                   reward:Grams
;;                   min_auth_num:uint16
;;                   keys:(HashmapE OracleAddress Oracle)
;;                   locked_stakes:(HashmapE OracleAddress Grams)
;;                    = OracleSetData;
;; secp_signature#_ signature:bits520 = SecpSignature;
;; external_vote_envelope#_ set_hash:uint256 signatures:(HashmapE SecpPubkey SecpSignature) = ExtVoteEnvelop
;;
;;
;; swap_to_ton#00 ext_chain_tx_hash:uint256 wc:int8 addr_hash:uint256 amount:uint64 = TonVoteEntity;
;; complaint_body#_ oracle_id:uint256 fine_amount:uint64 reason:^Cell = ComplaintBody;
;; complaint#01 set_hash:uint256 complaint_body_hash:uint256 complaint:^ComplaintBody = TonVoteEntity;
;; release_set#02 set_hash:uint256 = TonVoteEntity;
;; update_state_flags#03 state_flags:uint8 = TonVoteEntity;
;; migrate#04 wc:int8 addr_hash:uint256 = TonVoteEntity;
;; ton_vote_envelope#_ 
;;                     execution_status:int2 # -1: executed, 0 not_executed, 1 rejected
;;                     execution_time:int33
;;                     set_hash:uint256
;;                     authorization_num:uint16 authorizations:(HashmapE OracleAddress bool)
;;                     rejection_num:uint16 rejections:(HashmapE OracleAddress bool)
;;                     vote_entity:TonVoteEntity 
;; = TonVoteEnvelop;
;;
;; NOTE!!! Important all TonVoteEntity should contain ceil amount of bytes
;; Note id = SHA256U(TonVoteEntity slice)
;; ton_vote_id#_ id:uint256 = TonVotingId;

;; candidate#_ credit:Grams oracle:Oracle = Candidate;
;; set_hash#_ hash:uint256 = SetHash;
;; storage#_
;;             state_flags:uint8 # +1 - incoming_swaps not allowed, +2 stake operations are not allowed
;;             total_staked:Grams
;;             total_locked:Grams
;;             current_set_hash:SetHash
;;             sets:(HashmapE SetHash OracleSetData)
;;             candidates:(HashmapE OracleAddress Candidate)
;;             external_votings:(HashmapE ExtVotingId ExtVoteEnvelop)
;;             ton_votings:(HashmapE TonVotingId ^TonVoteEnvelop)
;;
;;
;; 71 config parameter
;; oracle#_ ed25519_key:uint256 secp256k1:uint256 = Oracle;
;; oracle_address#_ address_hash:uint256 = OracleAddress;
;; oracle_set#_ flat_stake:Grams min_auth_num:uint16 seqno:uint32 oracles:(HashMapE uint16 OracleAddress) = ExtChainOracleSet;
;; external_chain_oracles#_ current_set:ExtChainOracleSet = ConfigParam 71;



(int, int, int, int, cell, cell, cell, cell) load_data () inline {
  var ds = get_data().begin_parse();
  return (
          ds~load_uint(8),
          ds~load_grams(),
          ds~load_grams(),
          ds~load_uint(256),
          ds~load_dict(),
          ds~load_dict(),
          ds~load_dict(),
          ds~load_dict()
          );
}

() save_data (
              int state_flags,
              int total_staked,
              int total_locked,
              int current_set_hash,
              cell sets,
              cell candidates,
              cell external_votings,
              cell ton_votings) impure inline {
  var st = begin_cell().store_uint(state_flags, 8)
                       .store_grams(total_staked)
                       .store_grams(total_locked)
                       .store_uint(current_set_hash, 256)
                       .store_dict(sets)
                       .store_dict(candidates)
                       .store_dict(external_votings)
                       .store_dict(ton_votings)
            .end_cell();
  set_data(st);
}
