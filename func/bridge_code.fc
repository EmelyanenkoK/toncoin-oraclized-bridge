(slice, (int, int, int)) load_fees(slice s) inline {
    var fees = (s~load_grams(), s~load_grams(), s~load_uint(14));
    return (s, fees);
}

builder store_fees(builder b, (int, int, int) fees) inline {
  (int flat_reward, int network_fee, int factor) = fees;
  throw_if(factor > 10000, 391);
  return b.store_grams(flat_reward).store_grams(network_fee).store_uint(factor, 14);
}

(int, int, slice, (int, int, int)) load_data() inline_ref {
  var ds = get_data().begin_parse();
  return (ds~load_uint(8), ds~load_grams(), ds~load_msg_addr(), ds~load_fees());
}

() save_data(int state_flags, int total_locked, slice collector_address, fees) impure inline_ref {
  var st = begin_cell().store_uint(state_flags, 8)
                       .store_grams(total_locked)
                       .store_slice(collector_address)
                       .store_fees(fees)
                       .end_cell();
  set_data(st);
}

int calculate_fee(int msg_value, fees)  {
    (int flat_reward, int network_fee, int factor) = fees;
    int remain = msg_value - flat_reward - network_fee;
    throw_unless(400, remain > 0);
    int percent_fee = remain * factor / 10000;
    return flat_reward + network_fee + percent_fee;
}

;; create swap to external chain to destination address
() create_swap_from_ton(int destination_address, int amount, slice s_addr, int query_id, int is_text) impure {
    (int state_flags, int total_locked, slice collector_address, var fees) = load_data();
    throw_if(339, state_flags & 1);
    int fee = calculate_fee(amount, fees);
    amount -= fee;
    throw_unless(306, amount > 0);
    total_locked += amount;
    emit_log_simple(0xc0470ccf, begin_cell().store_uint(destination_address, 160).store_uint(amount, 64).end_cell().begin_parse());
    save_data(state_flags, total_locked, collector_address, fees);
    if(is_text) {
      [int, int] OK = pair(2, 0x4f4b);
      tuple list = cons(OK, cons(encode_number_to_text(amount), null()));
      return send_text_receipt_message(s_addr, list, 100000000, 2); ;; todo: всегда ли 0.1 хватит на комиссию?
    } else {
      return send_receipt_message(s_addr, 0x10000 + 3, query_id, 0, 100000000, 2);
    }
}

() process_comment_api_request (slice in_msg, int msg_value, slice s_addr) impure {
    throw_unless(327, in_msg.slice_bits() != 56 + 16 + 20 * 2 * 8);
    int command = in_msg~load_uint(56);
    throw_unless(328, command == 32500882701840163); ;; "swapTo#" other commands are unsupported
    int destination_address = in_msg~load_text_hex_number(20);
    return create_swap_from_ton(destination_address, msg_value, s_addr, 0, true);
}

() execute_voting (slice s_addr, slice voting_data, int bridge_address) impure {
  (int state_flags, int total_locked, slice collector_address, var fees) = load_data();

  int operation = voting_data~load_uint(8);
  if (operation == 0) { ;; swap

    (int ext_chain_hash,
     int internal_index,
     int wc,
     int addr_hash,
     int swap_amount) = (voting_data~load_uint(256),
                         voting_data~load_int(16),
                         voting_data~load_int(8),
                         voting_data~load_uint(256),
                         voting_data~load_uint(64));
    int fee = calculate_fee(swap_amount, fees);
    total_locked -= swap_amount;
    swap_amount -= fee;

    ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    var msg = begin_cell()
      .store_uint(0x10, 6) ;; #int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddressInt = 0 1 0 0 0 00
      .store_uint(4, 3).store_int(wc, 8).store_uint(addr_hash, 256)
      .store_grams(swap_amount)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(ext_chain_hash, 256)
      .store_uint(internal_index, 16);
    send_raw_message(msg.end_cell(), 0);

  } elseif (operation == 3) { ;; update state flags

    state_flags = voting_data~load_uint(8);

  } elseif (operation == 4) { ;; migrate

    var msg = begin_cell()
      .store_uint(0x18, 6) ;; #int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddressInt = 0 1 1 0 00
      .store_uint(4, 3).store_int(-1, 8).store_uint(bridge_address, 256)
      .store_grams(total_locked)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0xf00d, 32); ;; new bridge contract should recognize this opcode
    send_raw_message(msg.end_cell(), 1);
;;    total_locked = 0; ;; todo: а вдруг с первого раза не получится, так хоть второй раз попробуем

  } elseif (operation == 5) { ;; get reward

    ;; reserve total_locked + ~1024 [s]Grams[/s] Toncoins for fees ;; todo: подумать про 1024
    raw_reserve(total_locked + (1 << 40), 2);
    var msg = begin_cell()
      .store_uint(0x18, 6) ;; #int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddressInt = 0 1 1 0 00
      .store_slice(s_addr)
      .store_grams(0)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
    send_raw_message(msg.end_cell(), 128); ;; send all the remainings

  } elseif (operation == 6) { ;; change fees

    fees = voting_data~load_fees();

  } elseif (operation == 7) { ;; change collector

    collector_address = voting_data~load_msg_addr();

  }

  save_data(state_flags, total_locked, collector_address, fees);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  if (flags & 1) {
    ;; ignore all bounced messages
    return ();
  }
  slice s_addr = cs~load_msg_addr();
  throw_if(299, in_msg.slice_empty?()); ;; inbound message has empty body
  
  int op = in_msg~load_uint(32);
  (int bridge_address, int oracles_address, _) = get_bridge_config(); ;; todo: если config'а еще нет, то упадет, ОК ли это?
  (int wc, int addr) = parse_std_addr(s_addr);
  var is_oracles = (wc == -1) & (oracles_address == addr);

  if (op == 4) {
    throw_unless(305, is_oracles);
    return execute_voting(s_addr, in_msg, bridge_address);
  }
  throw_if(306, is_oracles); ;; don't allow to create swaps from oracles multisig
  if (op == 0) {
    return process_comment_api_request(in_msg, msg_value, s_addr);
  }
  int query_id = in_msg~load_uint(64);
  if (op == 3) {
    int destination_address = in_msg~load_uint(160);
    return create_swap_from_ton(destination_address, msg_value, s_addr, query_id, false);
  }
}

;; get methods

_ get_bridge_data() method_id {
    (int state_flags, int total_locked, slice collector_address_slice, var fees) = load_data();
    (int flat_reward, int network_fee, int factor) = fees;
    (int wc, int addr) = parse_std_addr(collector_address_slice);
    return (state_flags, total_locked, wc, addr, flat_reward, network_fee, factor, 1 << 14);
}
