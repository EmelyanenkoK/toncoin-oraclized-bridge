(int, int, int, int) get_bridge_data() method_id {
    (int state_flags, int total_staked, int total_locked, int current_set_hash, cell sets, cell candidates, cell external_votings, cell ton_votings) = load_data();
    return (state_flags, total_staked, total_locked, current_set_hash);
}

(int, int, int, int, tuple) _parse_oracle_set_data(slice set) {
    (int locked,
     int unrewarded_stake,
     int reward,
     int min_auth_num,
     cell oracle_keys,
     cell locked_stakes) = (set~load_uint(1),
                            set~load_grams(),
                            set~load_grams(),
                            set~load_uint(16),
                            set~load_dict(),
                            set~load_dict());
    tuple list = null();
    int oracle_id = -1;
    do {
      (oracle_id, slice data, int found?) = locked_stakes.udict_get_next?(256, oracle_id);
      if (found?) {
        int amount = data~load_grams();
        (slice key_data, int found_keys?) = oracle_keys.udict_get?(256, oracle_id);
        throw_unless(332, found_keys?);
        list = cons( tuple4( oracle_id, amount, key_data~load_uint(256), key_data~load_uint(256)), list);
      }
    } until (~ found?);

    return (locked, unrewarded_stake, reward, min_auth_num, list);
}

(int, int, int, int, tuple) get_oracle_set_data(int set_id) method_id {
    (int state_flags, int total_staked, int total_locked, int current_set_hash, cell sets, cell candidates, cell external_votings, cell ton_votings) = load_data();
    (slice set, int found?) = sets.udict_get?(256, set_id);
    throw_unless(331, found?);
    return _parse_oracle_set_data(set);
}

(int, int, int) get_candidate_data (int address_hash) method_id {
    (int state_flags, int total_staked, int total_locked, int current_set_hash, cell sets, cell candidates, cell external_votings, cell ton_votings) = load_data();
    (slice candidate, int found_candidate?) = candidates.udict_get?(256, address_hash);
    if(~ found_candidate?) {
      return (0, -1, -1);
    }
    return (candidate~load_grams(),
            candidate~load_uint(256),
            candidate~load_uint(256));
}

(tuple) get_oracle_sets() method_id {
    (int state_flags, int total_staked, int total_locked, int current_set_hash, cell sets, cell candidates, cell external_votings, cell ton_votings) = load_data();
    tuple list = null();
    int set_id = -1;
    do {
      (set_id, slice set, int found?) = sets.udict_get_next?(256, set_id);
      if (found?) {
        list = cons( pair( set_id, tuple5(_parse_oracle_set_data(set))), list);
      }
    } until (~ found?);
    return list;
}


(tuple) get_external_voting_data(int voting_id) method_id {
    (int state_flags, int total_staked, int total_locked, int current_set_hash, cell sets, cell candidates, cell external_votings, cell ton_votings) = load_data();
    (slice voting_data, int found?) = external_votings.udict_get?(256, voting_id);
    throw_unless(309, found?);
    (int _unused,
     cell  stored_signatures) = (voting_data~load_uint(256),
                                 voting_data~load_dict());
    tuple list = null();

    int secp_key = -1;
    do {
      (secp_key, slice sig, int found?) = stored_signatures.udict_get_next?(256, secp_key);
      if (found?) {
        (int r, int s, int v) = (sig~load_uint(256),
                                 sig~load_uint(256),
                                 sig~load_uint(8));
        list = cons( pair( secp_key, triple(r,s,v)), list);
      }
    } until (~ found?);
    return (list);
}


(int, int, int, tuple) get_ton_voting_status(int voting_id) method_id {
    (int state_flags, int total_staked, int total_locked, int current_set_hash, cell sets, cell candidates, cell external_votes, cell ton_votings) = load_data();
    (cell _voting_data, int found?) = ton_votings.udict_get_ref?(256, voting_id);
    throw_unless(309, found?);
    slice voting_data = _voting_data.begin_parse();
    (
     int executed?,
     int execution_utime,
     int set_hash,
     int auth_num,
     cell auths) = (voting_data~load_uint(1),
                    voting_data~load_int(33),
                    voting_data~load_uint(256),
                    voting_data~load_uint(16),
                    voting_data~load_dict());
    tuple list = null();
    int oid = -1;
    do {
      (oid, slice _unused, int found?) = auths.udict_get_next?(256, oid);
      if (found?) {
        list = cons( oid, list);
      }
    } until (~ found?);
   
   return (executed?, execution_utime, auth_num, list);
}
