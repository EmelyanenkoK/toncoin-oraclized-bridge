
() recv_external(slice in_msg) impure {
}


(cell) get_current_oracle_set() {
  return config_param(71);
}


((cell, cell, int), (int, int, cell)) ~check_update ((cell, cell, int) data) {
  (cell sets, cell candidates, int current_set_hash) = data;
  cell config_set = get_current_oracle_set();
  if( config_set.cell_null?()) {
    return ((sets, candidates, 0), (current_set_hash == 0, 0, new_dict()));
  }
  int config_set_hash = cell_hash(config_set);
  int set_updated? = current_set_hash != config_set_hash;
  slice config_set_data = config_set.begin_parse();
  (int flat_stake,
   int min_auth_num,
   int seqno,
   cell oracles) = (config_set_data~load_grams(),
                    config_set_data~load_uint(16),
                    config_set_data~load_uint(32),
                    config_set_data~load_dict());
  cell oracle_keys = new_dict();
  if (set_updated?) {
    current_set_hash = config_set_hash;
    int unrewarded_stake = 0;
    cell locked_stakes = new_dict();
    int _ind = -1;
    do {
      (_ind, slice oracle_id_, int found?) = oracles.udict_get_next?(16, _ind);
      if (found?) {
        int oracle_id = oracle_id_~load_uint(256);
        (cell candidates', slice candidate, int found_candidate?) = candidates.udict_delete_get?(256, oracle_id);
        if(found_candidate?) {
          slice candidate_copy = candidate;
          (int credit, slice pubkeys) = (candidate~load_grams(),
                                         candidate~load_bits(512));
          if(credit >= flat_stake) {
            candidates = candidates';
            credit = credit - flat_stake;
            builder new_candidate = begin_cell()
                                    .store_grams(credit)
                                    .store_slice(pubkeys);
            candidates~udict_set_builder(256, oracle_id, new_candidate);
            oracle_keys~udict_set(256, oracle_id, pubkeys);
            unrewarded_stake = unrewarded_stake + flat_stake;
            locked_stakes~udict_set_builder(256, oracle_id, begin_cell().store_grams(flat_stake));
          }
        }
      }
    } until (~ found?);
    int total_oracles_num = unrewarded_stake / flat_stake;
    ;; //TODO check number of oracles
    ;; throw_if( 314, total_oracles_num < 4);
    ;; min_auth_num = max(min_auth_num, total_oracles_num * 2 / 3);
    builder oracle_set_data = begin_cell()
                              .store_uint(1,1)
                              .store_grams(unrewarded_stake)
                              .store_grams(0)
                              .store_uint(min_auth_num,16)
                              .store_dict(oracle_keys)
                              .store_dict(locked_stakes);

    (sets, int success?) = sets.udict_add_builder?(256, current_set_hash, oracle_set_data);
    ;; Exception will be thrown if existed and non removed set are going to be rewritten
    ;; and it's data (credits) will be lost in this case we will effectively pause bridge
    ;; contract till validators set correct oracle set
    throw_unless(312, success?);
  } else {
    (slice set_s, int success?) = sets.udict_get?(256, current_set_hash);
    oracle_keys = set_s~load_ref(); ;; No need to parse and load_dict
  }
  return ((sets, candidates, current_set_hash), (set_updated?, min_auth_num, oracle_keys));
}

() deposit_stake(int msg_value, int ed_pubkey, int secp_pubkey, slice s_addr, int query_id) impure {
    (int state_flags, int total_stake, int _2, int current_set_hash, cell sets, cell candidates, cell _6, cell _7) = load_data();
    throw_if(338, state_flags & 2);
    (sets, candidates, current_set_hash)~check_update();
    (int src_wc, int src_addr_hash) = parse_std_addr(s_addr);
    throw_if(301, src_wc + 1); ;; not from masterchain, return error
    int fee = 1000000000;
    throw_if(302, msg_value < fee);
    int amount = msg_value - fee;
    (slice candidate, int found?) = candidates.udict_get?(256, src_addr_hash);
    int credit = 0;
    if (found?) {
      credit = candidate~load_grams();
      ;; To change pubkey withdraw all grams first
      throw_unless( 303, (ed_pubkey == candidate~load_uint(256)) & (secp_pubkey == candidate~load_uint(256)) );
    }
    credit = credit + amount;
    total_stake = total_stake + amount;
    builder new_candidate_data = begin_cell()
                            .store_grams(credit)
                            .store_uint(ed_pubkey, 256)
                            .store_uint(secp_pubkey, 256);
    candidates~udict_set_builder(256, src_addr_hash, new_candidate_data);
    save_data(state_flags, total_stake, _2, current_set_hash, sets, candidates, _6, _7);
    return send_receipt_message(s_addr, 0x10000 + 1, query_id, 0, fee / 10, 2);
}

() withdraw_stake(int amount, slice s_addr, int query_id) impure {
    (int state_flags, int total_stake, int _2, int current_set_hash, cell sets, cell candidates, cell _6, cell _7) = load_data();
    throw_if(338, state_flags & 2);
    (sets, candidates, current_set_hash)~check_update();
    (int src_wc, int src_addr_hash) = parse_std_addr(s_addr);
    throw_if(301, src_wc + 1); ;; not from masterchain, return error
    int fee = 1000000000;
    throw_if(302, amount < fee);
    (slice candidate, int found?) = candidates~udict_delete_get?(256, src_addr_hash);
    throw_unless(304, found?);
    int credit = candidate~load_grams();
    credit = credit - amount;
    total_stake = total_stake - amount;
    if(credit > 0) {
      builder new_candidate_data = begin_cell()
                              .store_grams(credit)
                              .store_slice(candidate);
      candidates~udict_set_builder(256, src_addr_hash, new_candidate_data);
    }
    save_data(state_flags, total_stake, _2, current_set_hash, sets, candidates, _6, _7);
    return send_receipt_message(s_addr, 0x10000 + 2, query_id, 0, amount - fee, 64 + 2);
}

(cell, ()) ~reward_set (cell sets, int current_set_hash, amount) impure {
    (slice old_set_data, int found?) = sets.udict_get?(256, current_set_hash);
    throw_unless(326, found?);
    (int locked, int unrewarded_stake, int reward) = (old_set_data~load_uint(1),
                                                     old_set_data~load_grams(),
                                                     old_set_data~load_grams());
    reward = reward + amount;
    builder oracle_set_data = begin_cell()
                              .store_uint(1,1)
                              .store_grams(unrewarded_stake)
                              .store_grams(reward)
                              .store_slice(old_set_data);

    sets~udict_set_builder(256, current_set_hash, oracle_set_data);
    return (sets, ());
}


() create_swap_from_ton(int destination_address, int amount, slice s_addr, int query_id, int is_text) impure {
    ;; create swap to external chain to destination address
    (int reward, int network_fee) = swap_to_ext_chain_fee(amount);
    amount = amount - reward - network_fee;
    throw_unless(306, amount > 0);
    (int state_flags, int _1, int total_locked, int current_set_hash, cell sets, cell candidates, cell _6, cell _7) = load_data();
    throw_if(339, state_flags & 1);
    (sets, candidates, current_set_hash)~check_update();
    total_locked = total_locked + amount;
    emit_log_simple(0xc0470ccf, begin_cell().store_uint(destination_address, 160).store_uint(amount, 64).end_cell().begin_parse());
    sets~reward_set(current_set_hash, reward);
    save_data(state_flags, _1, total_locked, current_set_hash, sets, candidates, _6, _7);
    if(is_text) {
      [int, int] OK = pair(2, 0x4f4b);
      tuple list = cons(OK, cons(encode_number_to_text(amount), null()));
      return send_text_receipt_message(s_addr, list, 100000000, 2);
    } else {
      return send_receipt_message(s_addr, 0x10000 + 3, query_id, 0, 100000000, 2);
    }
}

((int, cell, cell), (int)) ~execute_voting ((int, cell, cell) data, int current_set_hash, slice voting_data, int total_locked) impure {
  (int state_flags, cell sets, cell candidates) = data;
  int unlocked = 0;
  int operation = voting_data~load_uint(8);
  if(operation == 0) { ;; swap
    (int ext_chain_hash,
     int wc,
     int addr_hash,
     int swap_amount) = (voting_data~load_uint(256),
                    voting_data~load_int(8),
                    voting_data~load_uint(256),
                    voting_data~load_uint(64));
    (int reward, int network_fee) = swap_to_ton_fee(swap_amount);
    unlocked = swap_amount;
    swap_amount = swap_amount - reward - network_fee;
    sets~reward_set(current_set_hash, reward);
    ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    var msg = begin_cell()
      .store_uint(0x10, 6) ;; #int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddressInt = 0 1 0 0 0 00
      .store_uint(4, 3).store_int(wc, 8).store_uint(addr_hash, 256)
      .store_grams(swap_amount)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(ext_chain_hash, 256);
    send_raw_message(msg.end_cell(), 0);
  }
  if(operation == 1) { ;; punish oracle
    (int set_hash,
     int complaint_body_hash,
     cell complaint) = (voting_data~load_uint(256),
                        voting_data~load_uint(256),
                        voting_data~load_ref());
    if(cell_hash(complaint) == complaint_body_hash) {
      ;; unless do nothing: incorrect complaint
      slice complaint_body = complaint.begin_parse();
      (int oracle_id, int fine_amount) = (complaint_body~load_uint(256), complaint_body~load_uint(64));

      (slice old_set_data, int found?) = sets.udict_get?(256, set_hash);
      if(found?) {
        ;; unless do nothing: set already released
        (int locked,
         int unrewarded_stake,
         int reward,
         int auth_num,
         cell keys,
         cell stakes) = (old_set_data~load_uint(1),
                         old_set_data~load_grams(),
                         old_set_data~load_grams(),
                         old_set_data~load_uint(16),
                         old_set_data~load_dict(),
                         old_set_data~load_dict());
        (slice oracle_slice, int oracle_found?) = stakes~udict_delete_get?(256, oracle_id);
        int oracle_balance = oracle_slice~load_grams();
        int actual_fine = min(oracle_balance, fine_amount);
        ;; TODO what to do with fine?
        oracle_balance = oracle_balance - actual_fine;
        unrewarded_stake = unrewarded_stake - actual_fine;
        if(oracle_balance > 0) {
          stakes~udict_set_builder(256, oracle_id, begin_cell().store_grams(oracle_balance));
        }
        builder oracle_set_data = begin_cell()
                                  .store_uint(locked,1)
                                  .store_grams(unrewarded_stake)
                                  .store_grams(reward)
                                  .store_uint(auth_num, 16)
                                  .store_dict(keys)
                                  .store_dict(stakes);
        sets~udict_set_builder(256, set_hash, oracle_set_data);
      }
    }
  }
  if(operation == 2) { ;; release set
    int set_hash = voting_data~load_uint(256);
    throw_if(339, set_hash == current_set_hash);
    (slice set_data, int found?) = sets~udict_delete_get?(256, set_hash);
    if(found?) {
      ;; unless do nothing: set already released
      (int locked,
       int unrewarded_stake,
       int reward,
       int auth_num,
       cell keys,
       cell stakes) = (set_data~load_uint(1),
                       set_data~load_grams(),
                       set_data~load_grams(),
                       set_data~load_uint(16),
                       set_data~load_dict(),
                       set_data~load_dict());
      int oracle_id = -1;
      do {
        (oracle_id, slice stake_s, int oracle_found?) = stakes.udict_get_next?(256, oracle_id);
        if (found?) {
          int unrewarded_oracle_stake = stake_s~load_grams();
          ;; it is impossible to get uin256 overflow here, since reward and stake in grams
          int stake_n_reward = unrewarded_oracle_stake + unrewarded_oracle_stake * reward / unrewarded_stake ;
          int balance = 0;
          int key1 = 0; int key2 = 0;
          (slice candidate, int candidate_found?) = candidates.udict_get?(256, oracle_id);
          if(candidate_found?) {
           (balance, key1, key2) = (candidate~load_grams(),
                                       candidate~load_uint(256),
                                       candidate~load_uint(256));
          }
          balance = balance + stake_n_reward;
          candidates~udict_set_builder(256, oracle_id, begin_cell()
                                                        .store_grams(balance)
                                                        .store_uint(key1, 256)
                                                        .store_uint(key2, 256));
        }
      } until (~ oracle_found?);
    }
  }
  if(operation == 3) { ;; update state flags
    state_flags = voting_data~load_uint(8);
  }
  if(operation == 4) { ;; update state flags
    (int wc, int addr_hash) = (voting_data~load_uint(8), voting_data~load_uint(256));
    var msg = begin_cell()
      .store_uint(0x18, 6) ;; #int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddressInt = 0 1 1 0 00
      .store_uint(4, 3).store_int(wc, 8).store_uint(addr_hash, 256)
      .store_grams(total_locked)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0xf00d, 32); ;; new bridge contract should recognize this opcode
    send_raw_message(msg.end_cell(), 1);
    unlocked = total_locked;
  }
  return ((state_flags, sets, candidates), (unlocked));
}

(int, slice) check_oracle_authorization(slice s_addr, oracle_keys) impure {
    (int src_wc, int oracle_id) = parse_std_addr(s_addr);
    throw_if(301, src_wc + 1); ;; not from masterchain, return error
    (slice keys, int oracle_found?) = oracle_keys.udict_get?(256, oracle_id);
    throw_unless(320, oracle_found?);
    return (oracle_id, keys);
}


(cell, (int)) ~remove_outdated_authorizations (cell authorizations, cell new_oracle_keys) {
    cell new_auths = new_dict();
    int new_auth_num = 0;
    int oracle_id = -1;
    do {
      (oracle_id, slice true_slice, int found?) = authorizations.udict_get_next?(256, oracle_id);
      if (found?) {
        (slice keys, int oracle_found?) = new_oracle_keys.udict_get?(256, oracle_id);
        if(oracle_found?) {
          new_auths~udict_set(256, oracle_id, true_slice);
          new_auth_num = new_auth_num + 1;
        }
      }
    } until (~ found?);
    return (new_auths, (new_auth_num));
}

() vote_on_ton (slice s_addr, int query_id, slice voting_entity) impure {
    (int state_flags, int _1, int total_locked, int current_set_hash, cell sets, cell candidates, cell _6, cell ton_votings) = load_data();
    (int set_updated?, int min_auth_num, cell oracle_keys) = (sets, candidates, current_set_hash)~check_update();
    (int oracle_id, slice keys) = check_oracle_authorization(s_addr, oracle_keys);

    int reject? = voting_entity~load_int(1);
    int voting_id = string_hash(voting_entity);
    (cell _old_voting_data, int voting_found?) = ton_votings~udict_delete_get_ref?(256, voting_id);
    (int execution_status,
     int execution_time,
     int set_hash,
     int authorization_num,
     cell authorizations,
     int rejection_num,
     cell rejections) =
                        (0, -1, 0, 0, new_dict(), 0, new_dict());
    if(voting_found?) {
      slice old_voting_data = _old_voting_data.begin_parse();
      (execution_status,
       execution_time,
       set_hash,
       authorization_num,
       authorizations,
       rejection_num,
       rejections) =
                         (old_voting_data~load_int(2),
                          old_voting_data~load_int(33),
                          old_voting_data~load_uint(256),
                          old_voting_data~load_uint(16),
                          old_voting_data~load_dict(),
                          old_voting_data~load_uint(16),
                          old_voting_data~load_dict());
      if(current_set_hash != set_hash) {
        ;; remove signatures signed by oracle not presented in current set
        authorization_num = authorizations~remove_outdated_authorizations(oracle_keys);
        rejection_num = rejections~remove_outdated_authorizations(oracle_keys);
      }
    }
    throw_unless(321, execution_status == 0);
    int success? = 0;
    if(reject?) {
      (rejections, success?) = rejections.udict_add_builder?(256, oracle_id, begin_cell());
    } else {
      (authorizations, success?) = authorizations.udict_add_builder?(256, oracle_id, begin_cell());
    }
    throw_unless(322, success?);
    if(reject?) {
      rejection_num = rejection_num + 1;
      if (rejection_num >= min_auth_num) {
        execution_status = 1;
      }
    } else {
      authorization_num = authorization_num + 1;
      execution_status = authorization_num >= min_auth_num;
    }
    if(execution_status == -1) {
      total_locked = total_locked - (state_flags, sets, candidates)~execute_voting(current_set_hash, voting_entity, total_locked);
      execution_time = now();
    }
    if(execution_status == 1) {
      execution_time = now();
    }
    throw_unless(337, slice_depth(voting_entity) < 3);
    cell new_voting_data = begin_cell()
                               .store_int(execution_status, 2)
                               .store_int(execution_time, 33)
                               .store_uint(current_set_hash, 256)
                               .store_uint(authorization_num, 16)
                               .store_dict(authorizations)
                               .store_uint(rejection_num, 16)
                               .store_dict(rejections)
                               .store_slice(voting_entity)
                           .end_cell();
    (ton_votings, int success_storing?) = ton_votings.udict_add_ref?(256, voting_id, new_voting_data);
    throw_unless(323, success_storing?);
    save_data(state_flags, _1, total_locked, current_set_hash, sets, candidates, _6, ton_votings);
    return send_receipt_message(s_addr, 0x10000 + 4, query_id, voting_id, 0, 64);
}

() vote_on_external_chain (slice s_addr, int query_id, int voting_id, slice signature) impure {
    (int state_flags, int _1, int _2, int current_set_hash, cell sets, cell candidates, cell external_votings, cell _7) = load_data();
    (int set_updated?, int min_auth_num, cell oracle_keys) = (sets, candidates, current_set_hash)~check_update();
    (int oracle_id, slice keys) = check_oracle_authorization(s_addr, oracle_keys);

    (slice old_voting_data, int voting_found?) = external_votings.udict_get?(256, voting_id);
    cell signatures = new_dict();
    if(voting_found?) {
      (int _set_hash,
       signatures) =
                         (old_voting_data~load_uint(256),
                          old_voting_data~load_dict());
    }
    (int ed_key, int secp_key) = (keys~load_uint(256), keys~load_uint(256));
    (signatures, int success?) = signatures.udict_add?(256, secp_key, signature);
    throw_unless(324, success?);
    builder new_voting_data = begin_cell()
                               .store_uint(current_set_hash, 256)
                               .store_dict(signatures);
    external_votings~udict_set_builder(256, voting_id, new_voting_data);
    save_data(state_flags, _1, _2, current_set_hash, sets, candidates, external_votings, _7);
    return send_receipt_message(s_addr, 0x10000 + 5, query_id, voting_id, 0, 64);
}

() remove_outdated_votings (slice s_addr, int query_id, cell external_ids, cell internal_ids) impure {
    (int _0, int _1, int _2, int current_set_hash, cell sets, cell candidates, cell external_votings, cell ton_votings) = load_data();
    (int set_updated?, int min_auth_num, cell oracle_keys) = (sets, candidates, current_set_hash)~check_update();
    check_oracle_authorization(s_addr, oracle_keys);
    int id = -1;
    do {
      (id, slice unused, int found?) = external_ids.udict_get_next?(256, id);
      if(found?) {
        (cell external_votings', slice voting, int voting_found?) = external_votings.udict_delete_get?(256, id);
        if(voting_found?) {
          int set_hash = voting~load_uint(256);
          if (set_hash != current_set_hash) {
            ;; remove only old votings
            external_votings = external_votings';
          }
        }
      }
    } until (~ found?);

    int id = -1;
    do {
      (id, slice unused, int found?) = internal_ids.udict_get_next?(256, id);
      if(found?) {
        (cell ton_votings', slice voting, int voting_found?) = ton_votings.udict_delete_get?(256, id);
        if(voting_found?) {
          (int execution_status, slice unused, int set_hash) = (voting~load_int(2), voting~load_bits(33), voting~load_uint(256));
          if ((set_hash != current_set_hash) & (execution_status != 0)) {
            ;; remove only old and executed votings
            ton_votings = ton_votings';
          }
        }
      }
    } until (~ found?);
  save_data(_0, _1, _2, current_set_hash, sets, candidates, external_votings, ton_votings);
  return send_receipt_message(s_addr, 0x10000 + 6, query_id, 0, 0, 64);
}

() process_comment_api_request (slice in_msg, int msg_value, slice s_addr) impure {
    if (in_msg.slice_empty?() & (in_msg.slice_refs() == 1)) {
      cell _cont = in_msg~load_ref();
      in_msg = _cont.begin_parse();
    }
    throw_unless(327, in_msg.slice_bits() >= 56);
    int command = in_msg~load_uint(56);
    throw_unless(328, command == 32500882701840163); ;; "swapTo#" other commands are unsupported
    int destination_address = in_msg~load_text_hex_number(20);
    return create_swap_from_ton(destination_address, msg_value, s_addr, 0, true);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  if (flags & 1) {
    ;; ignore all bounced messages
    return ();
  }
  slice s_addr = cs~load_msg_addr();
  if (in_msg.slice_empty?()) {
    ;; inbound message has empty body
    throw(299);
  }
  int op = in_msg~load_uint(32);
  if (op == 0) {
    return process_comment_api_request(in_msg, msg_value, s_addr);
  }
  int query_id = in_msg~load_uint(64);
  if (op == 1) {
    ;; deposit stake
    if (in_msg.slice_empty?() & (in_msg.slice_refs() == 1)) {
      cell _cont = in_msg~load_ref();
      in_msg = _cont.begin_parse();
    }
    (int ed_publey, int secp_pubkey) = (in_msg~load_uint(256), in_msg~load_uint(256));
    return deposit_stake(msg_value, ed_publey, secp_pubkey, s_addr, query_id);
  }
  if (op == 2) {
    ;; withdraw stake
    int amount = in_msg~load_grams();
    return withdraw_stake(amount, s_addr, query_id);
  }
  if (op == 3) {
    int destination_address = in_msg~load_uint(160);
    return create_swap_from_ton(destination_address, msg_value, s_addr, query_id, false);
  }
  if (op == 4) { ;; vote on ton
    return vote_on_ton(s_addr, query_id, in_msg);
  }
  if (op == 5) {
    ;; submit signatures
    int voting_id = in_msg~load_uint(256);
    slice signature = in_msg~load_bits(520);
    return vote_on_external_chain(s_addr, query_id, voting_id, signature);
  }
  if (op == 6) {
    ;; remove old swaps
    (cell external_voting_ids,
     cell ton_voting_ids) = (in_msg~load_dict(),
                             in_msg~load_dict());
    return remove_outdated_votings(s_addr, query_id, external_voting_ids, ton_voting_ids);
  }
}
