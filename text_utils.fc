(tuple) encode_number_to_text(int number) {
  int len = 0;
  int value = 0;
  int mult = 1;
  do {
    (number, int res) = number.divmod(10);
    value = value + (res + 48) * mult;
    mult = mult * 256;
    len = len + 1;
  } until (number == 0);
  return pair_ints(len, value);
}

(slice, (int)) ~load_hex_4bit(slice comment) {
  int n = comment~load_uint(8);
  n = n - 48;
  throw_unless( 329, n > 0);
  if (n < 10) {
    return (comment, (n));
  }
  n = n - 7;
  throw_unless( 329, n > 0);
  if (n < 16) {
    return (comment, (n));
  }
  n = n - 32;
  throw_unless( 329, (n > 0) & (n < 16));
  return (comment, (n));
}

(slice, (int)) ~load_text_hex_number(slice comment, int byte_length) {
  throw_unless(328, comment.slice_bits() < (2 + byte_length) * 8);
  throw_unless(329, comment~load_uint(16) == 12408); ;; "0x"
  int result = 0;
  repeat (2 * byte_length) {
    result = result * 16 + comment~load_hex_4bit();
  }
  return (comment, (result));
}
