(slice, slice, cell) get_bridge_config() {
  cell bridge_config = config_param(71);
  throw_if(666, bridge_config.cell_null?())
  slice ds = bridge_config.begin_parse();
  slice bridge_address = ds~load_bits(8 + 256);
  slice oracles_address = ds~load_bits(8 + 256);
  cell oracles = ds~load_dict()
  return (bridge_address, oracles_address, oracles);
}

(int, int, cell) load_data () inline {
  var ds = get_data().begin_parse();
  return (
          ds~load_uint(8),
          ds~load_grams(),
          ds~load_dict()
          );
}

() save_data (
              int state_flags,
              int total_locked,
              cell external_votings) impure inline {
  var st = begin_cell().store_uint(state_flags, 8)
                       .store_grams(total_locked)
                       .store_dict(external_votings)
            .end_cell();
  set_data(st);
}

;; create swap to external chain to destination address
() create_swap_from_ton(int destination_address, int amount, slice s_addr, int query_id, int is_text) impure {
    (int reward, int network_fee) = swap_to_ext_chain_fee(amount);
    amount -= reward + network_fee;
    throw_unless(306, amount > 0);
    (int state_flags, int total_locked, cell external_votings) = load_data();
    throw_if(339, state_flags & 1);
    total_locked += amount;
    emit_log_simple(0xc0470ccf, begin_cell().store_uint(destination_address, 160).store_uint(amount, 64).end_cell().begin_parse());
    save_data(state_flags, total_locked, external_votings);
    if(is_text) {
      [int, int] OK = pair(2, 0x4f4b);
      tuple list = cons(OK, cons(encode_number_to_text(amount), null()));
      return send_text_receipt_message(s_addr, list, 100000000, 2);
    } else {
      return send_receipt_message(s_addr, 0x10000 + 3, query_id, 0, 100000000, 2);
    }
}

() process_comment_api_request (slice in_msg, int msg_value, slice s_addr) impure {
    throw_unless(327, in_msg.slice_bits() != 56 + 16 + 20 * 2 * 8);
    int command = in_msg~load_uint(56);
    throw_unless(328, command == 32500882701840163); ;; "swapTo#" other commands are unsupported
    int destination_address = in_msg~load_text_hex_number(20);
    return create_swap_from_ton(destination_address, msg_value, s_addr, 0, true);
}

() vote_on_external_chain (slice s_addr, int query_id, int voting_id, slice signature, cell oracles) impure {
    (int state_flags, int total_locked, cell external_votings) = load_data();

    ;; todo: check that sender is oracle

    ;; todo: обноваить external_votings

    save_data(state_flags, total_locked, external_votings);

    return send_receipt_message(s_addr, 0x10000 + 5, query_id, voting_id, 0, 64);
}

;; todo remove_outdated_external_votings

() execute_voting (slice s_addr, int query_id, slice voting_data) impure {
  (int state_flags, int total_locked, cell external_votings) = load_data();

  int operation = voting_data~load_uint(8);
  if(operation == 0) { ;; swap
    (int ext_chain_hash,
     int internal_index,
     int wc,
     int addr_hash,
     int swap_amount) = (voting_data~load_uint(256),
                         voting_data~load_int(16),
                         voting_data~load_int(8),
                         voting_data~load_uint(256),
                         voting_data~load_uint(64));
    (int reward, int network_fee) = swap_to_ton_fee(swap_amount);
    total_locked -= swap_amount;
    swap_amount -= reward + network_fee;

    ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    var msg = begin_cell()
      .store_uint(0x10, 6) ;; #int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddressInt = 0 1 0 0 0 00
      .store_uint(4, 3).store_int(wc, 8).store_uint(addr_hash, 256)
      .store_grams(swap_amount)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(ext_chain_hash, 256)
      .store_uint(internal_index, 16);
    send_raw_message(msg.end_cell(), 0);

  } else if(operation == 3) { ;; update state flags

    state_flags = voting_data~load_uint(8);

  } else if(operation == 4) { ;; migrate

    (int wc, int addr_hash) = (voting_data~load_uint(8), voting_data~load_uint(256));
    var msg = begin_cell()
      .store_uint(0x18, 6) ;; #int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddressInt = 0 1 1 0 00
      .store_uint(4, 3).store_int(wc, 8).store_uint(addr_hash, 256)
      .store_grams(total_locked)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0xf00d, 32); ;; new bridge contract should recognize this opcode
    send_raw_message(msg.end_cell(), 1);
    unlocked = total_locked;

  } else if (operation == 5) { ;; get reward

    ;; todo: send balance minus total_locked to oracles_address from config71

  }

  save_data(state_flags, total_locked, external_votings);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  if (flags & 1) {
    ;; ignore all bounced messages
    return ();
  }
  slice s_addr = cs~load_msg_addr();
  if (in_msg.slice_empty?()) {
    ;; inbound message has empty body
    throw(299);
  }
  int op = in_msg~load_uint(32);
  if (op == 0) {
    return process_comment_api_request(in_msg, msg_value, s_addr);
  }
  int query_id = in_msg~load_uint(64);
  if (op == 3) {
    int destination_address = in_msg~load_uint(160);
    return create_swap_from_ton(destination_address, msg_value, s_addr, query_id, false);
  }

  (int bridge_address, int oracles_address, cell oracles) = get_bridge_config();

  if (op == 5) { ;; submit signatures
    int voting_id = in_msg~load_uint(256);
    slice signature = in_msg~load_bits(520);
    return vote_on_external_chain(s_addr, query_id, voting_id, signature, oracles);
  }

  throw_if(slice_hash(s_addr) != slice_hash(oracles_address));

  if (op == 4) {
    return execute_voting(s_addr, query_id, in_msg);
  }

  if (op == 6) {  ;; remove old swaps
     ;; todo
  }
}