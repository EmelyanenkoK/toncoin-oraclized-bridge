(int, int, cell) get_bridge_config() impure inline_ref {
  cell bridge_config = config_param(71);
  if (bridge_config.cell_null?()) {
    bridge_config = config_param(-71)
  }
  throw_if(666, bridge_config.cell_null?());
  slice ds = bridge_config.begin_parse();
  ;; wc always equals to -1
  int bridge_address = ds~load_uint(256);
  int oracles_address = ds~load_uint(256);
  cell oracles = ds~load_dict();
  return (bridge_address, oracles_address, oracles);
}

(slice, (int, int, int)) load_fees(slice s) inline {
    var res = (s~load_grams(), s~load_grams(), s~load_uint(14));
    return (s, res);
}

(int, int, cell, (int, int, int)) load_data() inline_ref {
  var ds = get_data().begin_parse();
  return (ds~load_uint(8), ds~load_grams(), ds~load_dict(), ds~load_fees());
}

builder store_fees(builder b, (int, int, int) fees) inline {
  (int x, int y, int z) = fees;
  return b.store_grams(x).store_grams(y).store_uint(z, 14);
}

() save_data(int state_flags, int total_locked, cell external_votings, fees) impure inline_ref {
  var st = begin_cell().store_uint(state_flags, 8)
                       .store_grams(total_locked)
                       .store_dict(external_votings)
                       .store_fees(fees)
                       .end_cell();
  set_data(st);
}

;; create swap to external chain to destination address
() create_swap_from_ton(int destination_address, int amount, slice s_addr, int query_id, int is_text) impure {
    (int state_flags, int total_locked, cell external_votings, var fees) = load_data();
    (int reward, int network_fee) = swap_to_ext_chain_fee(amount, fees);
    amount -= reward + network_fee;
    throw_unless(306, amount > 0);
    throw_if(339, state_flags & 1);
    total_locked += amount;
    emit_log_simple(0xc0470ccf, begin_cell().store_uint(destination_address, 160).store_uint(amount, 64).end_cell().begin_parse());
    save_data(state_flags, total_locked, external_votings, fees);
    if(is_text) {
      [int, int] OK = pair(2, 0x4f4b);
      tuple list = cons(OK, cons(encode_number_to_text(amount), null()));
      return send_text_receipt_message(s_addr, list, 100000000, 2);
    } else {
      return send_receipt_message(s_addr, 0x10000 + 3, query_id, 0, 100000000, 2);
    }
}

() process_comment_api_request (slice in_msg, int msg_value, slice s_addr) impure {
    throw_unless(327, in_msg.slice_bits() != 56 + 16 + 20 * 2 * 8);
    int command = in_msg~load_uint(56);
    throw_unless(328, command == 32500882701840163); ;; "swapTo#" other commands are unsupported
    int destination_address = in_msg~load_text_hex_number(20);
    return create_swap_from_ton(destination_address, msg_value, s_addr, 0, true);
}

() vote_on_external_chain(slice s_addr, int query_id, int voting_id, slice signature) impure {
    (int state_flags, int total_locked, cell external_votings, var fees) = load_data();
    (_, int oracles_address, cell oracles) = get_bridge_config();
    (int wc, int addr) = parse_std_addr(s_addr);
    throw_if(301, wc + 1);
    (slice key, int found?) = oracles.udict_get?(256, addr);
    throw_unless(304, found?);

    (slice old_voting_data, int voting_found?) = external_votings.udict_get?(256, voting_id);
    cell signatures = new_dict();
    if (voting_found?) {
      (_, int old_oracles_address, signatures) = (old_voting_data~load_uint(32),
                                                  old_voting_data~load_uint(256),
                                                  old_voting_data~load_dict());
      if (old_oracles_address != oracles_address) {
        signatures = new_dict();
      }
    }
    int secp_key = key~load_uint(256);
    int success? = signatures~udict_add?(256, secp_key, signature);
    throw_unless(324, success?);
    builder new_voting_data = begin_cell()
                               .store_uint(now(), 32)
                               .store_uint(oracles_address, 256)
                               .store_dict(signatures);
    external_votings~udict_set_builder(256, voting_id, new_voting_data);

    save_data(state_flags, total_locked, external_votings, fees);
    return send_receipt_message(s_addr, 0x10000 + 5, query_id, voting_id, 0, 64);
}

() remove_outdated_votings(slice s_addr, int query_id, slice external_ids) impure {
    (int state_flags, int total_locked, cell external_votings, var fees) = load_data();
    (_, int oracles_address, cell oracles) = get_bridge_config();
    (int wc, int addr) = parse_std_addr(s_addr);
    throw_if(301, wc + 1);
    int f = (oracles_address == addr);
    if (~ f) {
      (_, int found?) = oracles.udict_get?(256, addr);
      throw_unless(304, found?);
    }

    int bound = now() - 60 * 60 * 24;
    while (~ external_ids.slice_empty?()) {
      if (external_ids.slice_data_empty?()) {
          external_ids = external_ids.preload_ref().begin_parse();
      }
      int voting_id = external_ids~load_uint(256);
      (cell external_votings', slice voting, int voting_found?) = external_votings.udict_delete_get?(256, id);
      if (voting_found?) {
        int last_update = voting~load_uint(32);
        if (f | (bound > last_update)) {
          ;; remove only old votings unless it's the will of majority of oracles
          external_votings = external_votings';
        }
      }
    }

    save_data(state_flags, total_locked, external_votings, fees);
    return send_receipt_message(s_addr, 0x10000 + 6, query_id, 0, 0, 64);
}

() execute_voting (slice s_addr, slice voting_data) impure {
  (int state_flags, int total_locked, cell external_votings, var fees) = load_data();

  int operation = voting_data~load_uint(8);
  if(operation == 0) { ;; swap
    (int ext_chain_hash,
     int internal_index,
     int wc,
     int addr_hash,
     int swap_amount) = (voting_data~load_uint(256),
                         voting_data~load_int(16),
                         voting_data~load_int(8),
                         voting_data~load_uint(256),
                         voting_data~load_uint(64));
    (int reward, int network_fee) = swap_to_ton_fee(swap_amount, fees);
    total_locked -= swap_amount;
    swap_amount -= reward + network_fee;

    ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    var msg = begin_cell()
      .store_uint(0x10, 6) ;; #int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddressInt = 0 1 0 0 0 00
      .store_uint(4, 3).store_int(wc, 8).store_uint(addr_hash, 256)
      .store_grams(swap_amount)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(ext_chain_hash, 256)
      .store_uint(internal_index, 16);
    send_raw_message(msg.end_cell(), 0);
  } else if(operation == 3) { ;; update state flags

    state_flags = voting_data~load_uint(8);

  } else if(operation == 4) { ;; migrate

    (int wc, int addr_hash) = (voting_data~load_uint(8), voting_data~load_uint(256));
    var msg = begin_cell()
      .store_uint(0x18, 6) ;; #int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddressInt = 0 1 1 0 00
      .store_uint(4, 3).store_int(wc, 8).store_uint(addr_hash, 256)
      .store_grams(total_locked)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0xf00d, 32); ;; new bridge contract should recognize this opcode
    send_raw_message(msg.end_cell(), 1);

  } else if (operation == 5) { ;; get reward
    ;; reserve total_locked + ~1024 [s]Grams[/s] Toncoins for fees
    raw_reserve(total_locked + (1 << 40), 2);
    var msg = begin_cell()
      .store_uint(0x18, 6) ;; #int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddressInt = 0 1 1 0 00
      .store_slice(s_addr)
      .store_grams(0)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
    send_raw_message(msg, 128); ;; send all the remainings
  } else if (operation == 6) { ;; change fees
    fees = voting_data~load_fees();
  }
  save_data(state_flags, total_locked, external_votings, fees);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  if (flags & 1) {
    ;; ignore all bounced messages
    return ();
  }
  slice s_addr = cs~load_msg_addr();
  if (in_msg.slice_empty?()) {
    ;; inbound message has empty body
    throw(299);
  }
  int op = in_msg~load_uint(32);
  if (op == 0) {
    return process_comment_api_request(in_msg, msg_value, s_addr);
  }
  int query_id = in_msg~load_uint(64);
  if (op == 3) {
    int destination_address = in_msg~load_uint(160);
    return create_swap_from_ton(destination_address, msg_value, s_addr, query_id, false);
  }

  if (op == 5) { ;; submit signatures
    int voting_id = in_msg~load_uint(256);
    slice signature = in_msg~load_bits(520);
    return vote_on_external_chain(s_addr, query_id, voting_id, signature, oracles);
  }

  if (op == 4) {
    (_, int oracels_address, _) = get_bridge_config();
    (int wc, int addr) = parse_std_addr(s_addr);
    throw_if(301, wc + 1);
    throw_unless(305, addr == oracels_address);
    return execute_voting(s_addr, in_msg);
  }

  if (op == 6) {  ;; remove old swaps
    return remove_outdated_votings(s_addr, query_id, in_msg);
  }
}